#!/usr/bin/env python3

import re
import os
import sys
import json

newitem = 'New entry. Please translate!'
changed = 'Modified entry. Please translate!'
olditem = 'Unmodified entry. The translation should be correct.'

renameMap = {
    'rateSetup':    'pidTuning',
    'profiles':     'pidTuning',
    'gyro':         'pidTuning',
    'status':       'initialSetup',
}

inUseRegex = [
    'translation_version',
    'language_',
    'portsFunction_[A-Z_]+$',
    'adjustmentsFunction[A-Za-z]+$',
    'controlAxisAux[0-9]+$',
    'beeper[A-Z_]+$',
    'feature[A-Z_]+$',
    'feature[A-Z_]+Tip$',
    'gyroRpmFilter',
    'statusArmingDisableFlagsTooltip[A-Z_]+$',
    'powerVoltageId[0-9]+$',
    'powerAmperageId[0-9]+$',
    'vtxType_',
    'osdSetupVideoFormatOption',
    'osdSetupUnitsOption',
    'osdTimerSourceOption',
    'osdTimerPrecisionOption',
    'osdDescribeFontVersion',
    'serialError',
    'reportProblemsDialog[A-Z_]+$',
]

keepRegex = [
    'translation_version',
]

noTransRegex = [
    'language_'
]

def matchRegex(key,reglist):
    for regex in reglist:
        if re.search(regex, key):
            return True
    return False

def isInUse(key, source, locale):
    if not os.system(f'grep -F -q "{key}" -R {source}'):
        return True
    if not os.system(f'grep -F -q "({key}.message)" {locale}'):
        return True
    return False

def tryRename(key, locale):
    if key not in locale:
        for (regex,rename) in renameMap.items():
            oldkey = re.sub(regex, rename, key)
            if oldkey in locale:
                print(f'Key renamed: {oldkey} => {key}')
                return oldkey

    return key

def load_locale(file):
    with open(file) as data:
        locale = json.load(data)
    return locale


def load_english_locale(file):

    locale = load_locale(file)

    for key in list(locale):
        if matchRegex(key, inUseRegex):
            continue
        if isInUse(key, 'src', file):
            continue
        print(f'{key} NOT USED')
        del locale[key]

    return locale


def load_translation(file, new_eng, old_eng):

    old_loc = load_locale(file)
    new_loc = {}

    for key in list(new_eng):

        if matchRegex(key, noTransRegex):
            continue

        new_loc[key] = {}

        old_key = tryRename(key, old_eng)

        if old_key in old_loc and old_key in old_eng:

            if matchRegex(key, keepRegex):
                new_loc[key] = old_loc[old_key]
                continue

            if old_eng[old_key]['message'] != new_eng[key]['message']:
                new_loc[key]['message'] = new_eng[key]['message']
                new_loc[key]['english'] = new_eng[key]['message']
                new_loc[key]['status'] = changed

            else:
                new_loc[key]['message'] = old_loc[old_key]['message']
                new_loc[key]['english'] = new_eng[key]['message']
                #out[key]['status'] = olditem

            if 'description' in old_loc[old_key]:
                new_loc[key]['description'] = old_loc[old_key]['description']
            elif 'description' in new_eng[key]:
                new_loc[key]['description'] = new_eng[key]['description']
            elif 'description' in old_eng[old_key]:
                new_loc[key]['description'] = old_eng[old_key]['description']

        else:
            if matchRegex(key, keepRegex):
                new_loc[key] = new_eng[key]
                continue

            new_loc[key]['message'] = new_eng[key]['message']
            new_loc[key]['english'] = new_eng[key]['message']

            if 'description' in new_eng[key]:
                new_loc[key]['description'] = new_eng[key]['description']

            new_loc[key]['status'] = newitem

    return new_loc


def main(args):

    old_file = args[1]
    new_file = args[2]

    i18n_files = args[3:]

    print(f'Old english locale: {old_file}')
    print(f'New english locale: {new_file}')

    old_eng = load_locale(old_file)
    new_eng = load_english_locale(new_file)

    with open(new_file, 'w', encoding='utf8') as out:
        json.dump(new_eng, out, indent=4, ensure_ascii=False)

    for file in i18n_files:
        print(f'Processing locale: {file}')
        trans = load_translation(file, new_eng, old_eng)
        with open(file, 'w', encoding='utf8') as out:
            json.dump(trans, out, indent=4, ensure_ascii=False)

main(sys.argv)
